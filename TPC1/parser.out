Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> sequencia
Rule 1     sequencia -> sentido intervalos
Rule 2     sentido -> +
Rule 3     sentido -> -
Rule 4     intervalos -> intervalo
Rule 5     intervalos -> intervalos intervalo
Rule 6     intervalo -> [ NUM , NUM ]

Terminals, with rules where they appear

+                    : 2
,                    : 6
-                    : 3
NUM                  : 6 6
[                    : 6
]                    : 6
error                : 

Nonterminals, with rules where they appear

intervalo            : 4 5
intervalos           : 1 5
sentido              : 1
sequencia            : 0

Parsing method: LALR

state 0

    (0) S' -> . sequencia
    (1) sequencia -> . sentido intervalos
    (2) sentido -> . +
    (3) sentido -> . -

    +               shift and go to state 3
    -               shift and go to state 4

    sequencia                      shift and go to state 1
    sentido                        shift and go to state 2

state 1

    (0) S' -> sequencia .



state 2

    (1) sequencia -> sentido . intervalos
    (4) intervalos -> . intervalo
    (5) intervalos -> . intervalos intervalo
    (6) intervalo -> . [ NUM , NUM ]

    [               shift and go to state 7

    intervalos                     shift and go to state 5
    intervalo                      shift and go to state 6

state 3

    (2) sentido -> + .

    [               reduce using rule 2 (sentido -> + .)


state 4

    (3) sentido -> - .

    [               reduce using rule 3 (sentido -> - .)


state 5

    (1) sequencia -> sentido intervalos .
    (5) intervalos -> intervalos . intervalo
    (6) intervalo -> . [ NUM , NUM ]

    $end            reduce using rule 1 (sequencia -> sentido intervalos .)
    [               shift and go to state 7

    intervalo                      shift and go to state 8

state 6

    (4) intervalos -> intervalo .

    [               reduce using rule 4 (intervalos -> intervalo .)
    $end            reduce using rule 4 (intervalos -> intervalo .)


state 7

    (6) intervalo -> [ . NUM , NUM ]

    NUM             shift and go to state 9


state 8

    (5) intervalos -> intervalos intervalo .

    [               reduce using rule 5 (intervalos -> intervalos intervalo .)
    $end            reduce using rule 5 (intervalos -> intervalos intervalo .)


state 9

    (6) intervalo -> [ NUM . , NUM ]

    ,               shift and go to state 10


state 10

    (6) intervalo -> [ NUM , . NUM ]

    NUM             shift and go to state 11


state 11

    (6) intervalo -> [ NUM , NUM . ]

    ]               shift and go to state 12


state 12

    (6) intervalo -> [ NUM , NUM ] .

    [               reduce using rule 6 (intervalo -> [ NUM , NUM ] .)
    $end            reduce using rule 6 (intervalo -> [ NUM , NUM ] .)

